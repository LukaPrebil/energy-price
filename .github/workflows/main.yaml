name: Deploy Workflow
run-name: Deploy ${{ inputs.github-ref || 'main' }} to ${{ inputs.environment || 'prod' }} by @${{ github.actor }}

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      github-ref:
        description: "The branch, tag or SHA to checkout"
        type: string
        default: ""
      environment:
        description: "Environment on which to deploy (dev | prod)"
        required: true
        type: choice
        options:
            - prod
      force-rebuild:
        description: "Force rebuild of Docker image"
        required: false
        type: boolean
        default: false

#  Required for OIDC
permissions:
  actions: read
  checks: write
  contents: write
  id-token: write
  pull-requests: write

env:
  PROJECT_ID: energy-price-api
  PROJECT_NUMBER: 1029532440814
  WIF_PROVIDER: projects/1029532440814/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
  SERVICE_ACCOUNT: terraform@energy-price-api.iam.gserviceaccount.com
  REGISTRY: europe-west1-docker.pkg.dev
  IMAGE_NAME: energy-price-api
  TF_STATE_BUCKET: energy-price-api-tf-state

jobs:
  build-docker-image:
    runs-on: ubuntu-latest
    name: Build Docker image
    outputs:
      is-rebuilt: ${{ steps.changed-files-specific.outputs.any_changed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.github-ref }}
          fetch-depth: 0

      - name: Check if any file changed in specified dirs
        id: changed-files-specific
        uses: tj-actions/changed-files@v43
        with:
          since_last_remote_commit: false
          files: |
            src/**
            config.json

      - name: Set up QEMU
        if: steps.changed-files-specific.outputs.any_changed == 'true' || inputs.force-rebuild
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.changed-files-specific.outputs.any_changed == 'true' || inputs.force-rebuild
        uses: docker/setup-buildx-action@v3

      - name: Build and cache image
        if: steps.changed-files-specific.outputs.any_changed == 'true' || inputs.force-rebuild
        uses: docker/build-push-action@v5
        with:
          context: "."
          cache-to: type=gha
          provenance: false

  publish:
    needs: [build-docker-image]
    if: ${{ needs.build-docker-image.outputs.is-rebuilt == 'true' || inputs.force-rebuild }}
    runs-on: ubuntu-latest
    name: Publish Docker image to Artifact registry
    outputs:
      image-sha: ${{ steps.publish.outputs.digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.github-ref }}
          fetch-depth: 0
      
      - id: auth
        name: Authenticate to GCP (OIDC)
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: europe-west1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Obtain short SHA of the last commit
        id: hash
        run: echo "SHORT_SHA=`git rev-parse --short HEAD`" >> $GITHUB_ENV

      - name: Load cached image and push tagged to artifact registry
        id: publish
        uses: docker/build-push-action@v5
        with:
          context: "."
          cache-from: type=gha
          outputs: type=registry
          provenance: false
          # Example: europe-west1-docker.pkg.dev/project-id/cloud-run/service-name:ae43d5f
          tags: |
            ${{ format(
              '{0}/{1}/cloud-run/{2}:latest',
              env.REGISTRY,
              env.PROJECT_ID,
              env.IMAGE_NAME
            ) }}
            ${{ format(
              '{0}/{1}/cloud-run/{2}:{3}',
              env.REGISTRY,
              env.PROJECT_ID,
              env.IMAGE_NAME,
              env.SHORT_SHA
            ) }}

  tf-deploy:
    needs: [publish]
    if: ${{ always()}}
    runs-on: ubuntu-latest
    name: Deploy to GCP
    env: 
      WORK_DIR: "./terraform"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.github-ref }}
      
      - name: Print outputs
        run: echo "Image SHA ${{ needs.publish.outputs.image-sha }}"

      - name: Authenticate to GCP (OIDC)
        uses: google-github-actions/auth@v2
        id: auth
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init -reconfigure -backend-config="bucket=${{ env.TF_STATE_BUCKET }}"
        working-directory: ${{ env.WORK_DIR }}

      - name: Terraform plan
        run: terraform plan -lock-timeout=5m -no-color -var-file=env/${{ inputs.environment || 'prod' }}.tfvars -var="image_tag=${{ needs.publish.outputs.image-sha || 'latest' }}" -out=tfplan
        working-directory: ${{ env.WORK_DIR }}

      - name: Terraform apply
        run: terraform apply -lock-timeout=5m -no-color -auto-approve tfplan
        working-directory: ${{ env.WORK_DIR }}